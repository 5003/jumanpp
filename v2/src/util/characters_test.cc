

#include "characters.hpp"
#include <testing/standalone_test.h>

using jumanpp::StringPiece;
using namespace jumanpp::chars;

TEST_CASE("toCodepoint works with „ÅÇ", "[string_piece]") {
    char32_t result;    
    auto literal = "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä";
    CHECK(toCodepoint(literal, literal+sizeof(literal)-1, &result));
}

TEST_CASE("„ÉÜ„Çπ„Éà„Ç±„Éº„ÇπÂêç", "[string_piece]") {

  //Status preprocessRawData(StringPiece utf8data,
  //                       std::vector<InputCodepoint> *result) {
  std::vector<InputCodepoint> result;
  CHECK_OK(preprocessRawData("", &result));
  CHECK(result.size() == 0);

  result.clear();
  CHECK_OK(preprocessRawData("test", &result));
  CHECK(result.size() == 4);
  CHECK(result[0].codepoint == U't');
  CHECK(result[3].codepoint == U't');
  
  result.clear();
  CHECK_OK(preprocessRawData("„ÅÇ„ÅÑ„ÅÜ„Åà„Åä", &result));
  CHECK(result.size() == 5);
  CHECK(result[0].codepoint == U'„ÅÇ');
  CHECK(result[4].codepoint == U'„Åä');
  
  result.clear();
  CHECK_OK(preprocessRawData("ÔΩ±ÔΩ≤ÔΩ≥ÔΩ¥ÔΩµ", &result));
  CHECK(result.size() == 5);
  CHECK(result[0].codepoint == U'ÔΩ±');
  CHECK(result[4].codepoint == U'ÔΩµ');
  
  result.clear();
  CHECK_OK(preprocessRawData("‰∫ú", &result));
  CHECK(result.size() == 1);
  CHECK(result[0].codepoint == U'‰∫ú');
  
  result.clear();
  CHECK_OK(preprocessRawData("üç£üç∫", &result));
  CHECK(result.size() == 1);
  CHECK(result[0].codepoint == U'üç£');
  CHECK(result[1].codepoint == U'üç∫');
}


  // Invalid UTF8 sequence
  //CHECK_FALSE(StringPiece(std::string("test2")) == "test");
